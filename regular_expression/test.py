s = 'ABC\\-001'
print(s)
s1 = r'ABC\-001'  # 使用Python的r前缀，就不用考虑转义的问题了
print(s1)
import re

print(re.match(r'^\d{3}\-\d{3,8}$', '010-012345'))  # 匹配成功，返回一个Match对象
print(re.match(r'^\d{3}\-\d{3,8}$', '010 012345'))  # 匹配不成功，返回None
print('a b  c'.split(' '))  # 输出为['a', 'b', '', 'c']，所以split()无法识别连续的空格
print(re.split(r'\s+', 'a b   c'))  # 输出为['a', 'b', 'c']
print(re.split(r'[\s\,]+', 'a,b, c  d'))  # 输出为['a', 'b', 'c', 'd']
print(re.split(r'[\s\,\;]+', 'a,b;; c  d'))
# 正则表达式的作用之一：如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组


# 除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）
# ^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码
